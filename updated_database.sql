-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.admin_notifications
(
    notification_id integer NOT NULL DEFAULT nextval('admin_notifications_notification_id_seq'::regclass),
    super_admin_id integer,
    addressed_to character varying(50) COLLATE pg_catalog."default",
    addressed_to_id integer,
    title character varying(100) COLLATE pg_catalog."default",
    message text COLLATE pg_catalog."default",
    created_at timestamp without time zone,
    CONSTRAINT admin_notifications_pkey PRIMARY KEY (notification_id)
);

CREATE TABLE IF NOT EXISTS public.appointment
(
    appointmentid integer NOT NULL DEFAULT nextval('appointment_appointmentid_seq'::regclass),
    doctor_id integer,
    patient_id integer,
    appointmentdate date,
    appointmenttime time without time zone,
    status character varying(20) COLLATE pg_catalog."default",
    createdat timestamp without time zone,
    type character varying(50) COLLATE pg_catalog."default",
    payment_mode character varying(50) COLLATE pg_catalog."default",
    transaction_id character varying(50) COLLATE pg_catalog."default" DEFAULT 'COD'::character varying,
    address text COLLATE pg_catalog."default",
    amount_paid_to_be_paid numeric,
    transaction_status bit(1),
    CONSTRAINT appointment_pkey PRIMARY KEY (appointmentid)
);

CREATE TABLE IF NOT EXISTS public.blog_comment
(
    comment_id integer NOT NULL DEFAULT nextval('blog_comment_comment_id_seq'::regclass),
    blog_id integer,
    description text COLLATE pg_catalog."default",
    posted_by integer,
    CONSTRAINT blog_comment_pkey PRIMARY KEY (comment_id)
);

CREATE TABLE IF NOT EXISTS public.blogs
(
    blog_id integer NOT NULL DEFAULT nextval('blogs_blog_id_seq'::regclass),
    blog_name character varying(60) COLLATE pg_catalog."default",
    category character varying(50) COLLATE pg_catalog."default",
    link character varying(255) COLLATE pg_catalog."default",
    blog_postedby integer,
    CONSTRAINT blogs_pkey PRIMARY KEY (blog_id)
);

CREATE TABLE IF NOT EXISTS public.cart_table_test
(
    tcart_no integer NOT NULL DEFAULT nextval('cart_table_test_tcart_no_seq'::regclass),
    patient_id integer,
    test_id integer,
    price numeric,
    CONSTRAINT cart_table_test_pkey PRIMARY KEY (tcart_no)
);

CREATE TABLE IF NOT EXISTS public.departments
(
    dept_id integer NOT NULL DEFAULT nextval('departments_dept_id_seq'::regclass),
    hospital_id integer,
    dept_name character varying(50) COLLATE pg_catalog."default",
    parent_dept_id integer,
    flag bit(1),
    dept_img_path character varying(255) COLLATE pg_catalog."default",
    dept_description text COLLATE pg_catalog."default",
    CONSTRAINT departments_pkey PRIMARY KEY (dept_id)
);

CREATE TABLE IF NOT EXISTS public.doc_add
(
    doctor_id integer,
    address text COLLATE pg_catalog."default"
);

CREATE TABLE IF NOT EXISTS public.doc_auth
(
    auth_id integer NOT NULL DEFAULT nextval('doc_auth_auth_id_seq'::regclass),
    profile_id integer,
    admin_id integer,
    status character varying(30) COLLATE pg_catalog."default" DEFAULT 'InReview'::character varying,
    description text COLLATE pg_catalog."default",
    CONSTRAINT doc_auth_pkey PRIMARY KEY (auth_id)
);

CREATE TABLE IF NOT EXISTS public.doctor_bank_details
(
    doctor_id integer,
    bankname character varying(100) COLLATE pg_catalog."default",
    accountnumber character varying(50) COLLATE pg_catalog."default",
    ifsccode character varying(20) COLLATE pg_catalog."default",
    upi_id character varying(255) COLLATE pg_catalog."default",
    branchaddress character varying(200) COLLATE pg_catalog."default",
    gstnumber character varying(15) COLLATE pg_catalog."default",
    pancardnumber character varying(15) COLLATE pg_catalog."default",
    aadharnumber bigint
);

CREATE TABLE IF NOT EXISTS public.doctor_profile
(
    doctor_id integer NOT NULL DEFAULT nextval('doctor_profile_doctor_id_seq'::regclass),
    profile_id integer,
    first_name character varying(50) COLLATE pg_catalog."default",
    last_name character varying(50) COLLATE pg_catalog."default",
    email_id character varying(50) COLLATE pg_catalog."default",
    contact bigint,
    gender character varying(10) COLLATE pg_catalog."default",
    address character varying(100) COLLATE pg_catalog."default",
    pincode integer,
    city character varying(30) COLLATE pg_catalog."default",
    state character varying(30) COLLATE pg_catalog."default",
    dob date,
    spec_id integer,
    degree character varying(100) COLLATE pg_catalog."default",
    yearpassout integer,
    degreeuniversity character varying(200) COLLATE pg_catalog."default",
    experience integer,
    biography text COLLATE pg_catalog."default",
    photo character varying(255) COLLATE pg_catalog."default",
    pan_card_doc character varying(255) COLLATE pg_catalog."default",
    gst_certificate_doc character varying(255) COLLATE pg_catalog."default",
    degree_certificate_doc character varying(255) COLLATE pg_catalog."default",
    adhar_card_doc character varying(255) COLLATE pg_catalog."default",
    associated_with character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT doctor_profile_pkey PRIMARY KEY (doctor_id)
);

CREATE TABLE IF NOT EXISTS public.doctor_registration
(
    profile_id integer NOT NULL DEFAULT nextval('doctor_registration_profile_id_seq'::regclass),
    first_name character varying(50) COLLATE pg_catalog."default",
    last_name character varying(50) COLLATE pg_catalog."default",
    password character varying(30) COLLATE pg_catalog."default",
    email_id character varying(100) COLLATE pg_catalog."default",
    license_number character varying(50) COLLATE pg_catalog."default",
    specialization character varying(100) COLLATE pg_catalog."default",
    account_status character varying(100) COLLATE pg_catalog."default",
    count bigint,
    CONSTRAINT doctor_registration_pkey PRIMARY KEY (profile_id)
);

CREATE TABLE IF NOT EXISTS public.doctor_schedule
(
    slot_id integer NOT NULL DEFAULT nextval('doctor_schedule_slot_id_seq'::regclass),
    doctor_id integer,
    date date,
    start_time time without time zone,
    end_time time without time zone,
    type_of_availability character varying(30) COLLATE pg_catalog."default",
    address_of_availability text COLLATE pg_catalog."default",
    CONSTRAINT doctor_schedule_pkey PRIMARY KEY (slot_id)
);

CREATE TABLE IF NOT EXISTS public.feedback_hospital
(
    feedback_id integer NOT NULL DEFAULT nextval('feedback_hospital_feedback_id_seq'::regclass),
    centre_id integer,
    patient_id integer,
    rating integer,
    description text COLLATE pg_catalog."default",
    date date,
    CONSTRAINT feedback_hospital_pkey PRIMARY KEY (feedback_id)
);

CREATE TABLE IF NOT EXISTS public.feedback_lab
(
    feedback_id integer NOT NULL DEFAULT nextval('feedback_lab_feedback_id_seq'::regclass),
    lab_id integer,
    patient_id integer,
    rating integer,
    descriptions text COLLATE pg_catalog."default",
    date date,
    CONSTRAINT feedback_lab_pkey PRIMARY KEY (feedback_id)
);

CREATE TABLE IF NOT EXISTS public.feedback_todoctor
(
    feedback_id integer NOT NULL DEFAULT nextval('feedback_todoctor_feedback_id_seq'::regclass),
    doctor_id integer,
    patient_id integer,
    rating integer,
    description text COLLATE pg_catalog."default",
    date date,
    CONSTRAINT feedback_todoctor_pkey PRIMARY KEY (feedback_id)
);

CREATE TABLE IF NOT EXISTS public.fees
(
    doctor_id integer,
    speciality character varying(50) COLLATE pg_catalog."default",
    fees integer
);

CREATE TABLE IF NOT EXISTS public.hospital_admin
(
    hospitaladmin_id integer NOT NULL DEFAULT nextval('hospital_admin_hospitaladmin_id_seq'::regclass),
    hospital_id integer,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    email_id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    password character varying(100) COLLATE pg_catalog."default" NOT NULL,
    contact character varying(15) COLLATE pg_catalog."default" NOT NULL,
    added_by integer,
    CONSTRAINT hospital_admin_pkey PRIMARY KEY (hospitaladmin_id)
);

CREATE TABLE IF NOT EXISTS public.hospital_advertising
(
    ad_id integer NOT NULL DEFAULT nextval('hospital_advertising_ad_id_seq'::regclass),
    hospital_id integer,
    ad_name character varying(100) COLLATE pg_catalog."default",
    ad_type character varying(50) COLLATE pg_catalog."default",
    ad_content_path character varying(50) COLLATE pg_catalog."default",
    start_date date,
    end_date date,
    ad_description text COLLATE pg_catalog."default",
    CONSTRAINT hospital_advertising_pkey PRIMARY KEY (ad_id)
);

CREATE TABLE IF NOT EXISTS public.hospital_discount
(
    offer_id integer NOT NULL DEFAULT nextval('hospital_discount_offer_id_seq'::regclass),
    hospital_id integer,
    offer_name character varying(100) COLLATE pg_catalog."default",
    offer_description text COLLATE pg_catalog."default",
    discount_percentage numeric(5, 2),
    start_date date,
    end_date date,
    criteria text COLLATE pg_catalog."default",
    CONSTRAINT hospital_discount_pkey PRIMARY KEY (offer_id)
);

CREATE TABLE IF NOT EXISTS public.hospitals
(
    hospital_id integer NOT NULL DEFAULT nextval('hospitals_hospital_id_seq'::regclass),
    hospital_name character varying(30) COLLATE pg_catalog."default",
    hospital_city character varying(30) COLLATE pg_catalog."default",
    hospital_address character varying(200) COLLATE pg_catalog."default",
    h_open_time time without time zone,
    h_close_time time without time zone,
    h_official_email character varying(255) COLLATE pg_catalog."default",
    h_official_contact character varying(10) COLLATE pg_catalog."default",
    h_reg_certi_path character varying(200) COLLATE pg_catalog."default",
    h_reg_time_stamp timestamp without time zone,
    CONSTRAINT hospitals_pkey PRIMARY KEY (hospital_id)
);

CREATE TABLE IF NOT EXISTS public.inventory
(
    inv_id integer NOT NULL,
    med_id integer,
    pharma_id integer,
    med_units integer,
    exp_date date,
    mfg_date date,
    batch_no character varying(50) COLLATE pg_catalog."default",
    price numeric,
    pack_size character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT inventory_pkey PRIMARY KEY (inv_id)
);

CREATE TABLE IF NOT EXISTS public.lab_admin
(
    labadmin_id integer NOT NULL DEFAULT nextval('lab_admin_labadmin_id_seq'::regclass),
    lab_id integer,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    email_id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    password character varying(100) COLLATE pg_catalog."default" NOT NULL,
    contact character varying(15) COLLATE pg_catalog."default" NOT NULL,
    added_by integer,
    CONSTRAINT lab_admin_pkey PRIMARY KEY (labadmin_id)
);

CREATE TABLE IF NOT EXISTS public.lab_advertising
(
    ad_id integer NOT NULL DEFAULT nextval('lab_advertising_ad_id_seq'::regclass),
    lab_id integer,
    ad_name character varying(100) COLLATE pg_catalog."default",
    ad_type character varying(50) COLLATE pg_catalog."default",
    ad_content_path character varying(50) COLLATE pg_catalog."default",
    start_date date,
    end_date date,
    ad_description text COLLATE pg_catalog."default",
    CONSTRAINT lab_advertising_pkey PRIMARY KEY (ad_id)
);

CREATE TABLE IF NOT EXISTS public.lab_discount
(
    offer_id integer NOT NULL DEFAULT nextval('lab_discount_offer_id_seq'::regclass),
    lab_id integer,
    test_id integer,
    offer_name character varying(100) COLLATE pg_catalog."default",
    offer_description text COLLATE pg_catalog."default",
    discount_percentage numeric(5, 2),
    start_date date,
    end_date date,
    CONSTRAINT lab_discount_pkey PRIMARY KEY (offer_id)
);

CREATE TABLE IF NOT EXISTS public.labs
(
    lab_id integer NOT NULL DEFAULT nextval('labs_lab_id_seq'::regclass),
    lab_city character varying(50) COLLATE pg_catalog."default",
    lab_address character varying(255) COLLATE pg_catalog."default",
    lab_name character varying(50) COLLATE pg_catalog."default",
    lab_reg_certi_path character varying(255) COLLATE pg_catalog."default",
    lab_reg_time_stamp timestamp without time zone,
    pincode integer NOT NULL,
    reg_number character varying COLLATE pg_catalog."default" NOT NULL,
    "startTime" timestamp without time zone,
    "endTime" timestamp without time zone,
    CONSTRAINT labs_pkey PRIMARY KEY (lab_id)
);

CREATE TABLE IF NOT EXISTS public.lifestyle
(
    smoke character varying(255) COLLATE pg_catalog."default",
    s_no bigint NOT NULL,
    alcohol character varying COLLATE pg_catalog."default",
    excercise character varying COLLATE pg_catalog."default",
    "foodPreferences" character varying COLLATE pg_catalog."default",
    occupation character varying COLLATE pg_catalog."default",
    patient_id bigint NOT NULL,
    CONSTRAINT lifestyle_pkey PRIMARY KEY (s_no)
);

CREATE TABLE IF NOT EXISTS public.likes_blog
(
    patient_id integer NOT NULL,
    blog_id integer NOT NULL DEFAULT nextval('likes_blog_blog_id_seq'::regclass),
    CONSTRAINT likes_blog_pkey PRIMARY KEY (patient_id, blog_id)
);

CREATE TABLE IF NOT EXISTS public.login_audit
(
    id integer NOT NULL DEFAULT nextval('login_audit_id_seq'::regclass),
    user_id integer NOT NULL,
    login_time timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    ip_address character varying(45) COLLATE pg_catalog."default" NOT NULL,
    login_status character varying(10) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT login_audit_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.medical_record
(
    record_no integer NOT NULL DEFAULT nextval('medical_record_record_no_seq'::regclass),
    record_name character varying(100) COLLATE pg_catalog."default",
    patient_id integer,
    record_address character varying(255) COLLATE pg_catalog."default",
    uploaded_by integer,
    uploaded_on date,
    CONSTRAINT medical_record_pkey PRIMARY KEY (record_no)
);

CREATE TABLE IF NOT EXISTS public.medicine
(
    med_id integer NOT NULL DEFAULT nextval('medicine_med_id_seq'::regclass),
    category_id integer,
    med_name character varying(100) COLLATE pg_catalog."default",
    med_image character varying(255) COLLATE pg_catalog."default",
    med_availability boolean,
    CONSTRAINT medicine_pkey PRIMARY KEY (med_id)
);

CREATE TABLE IF NOT EXISTS public.medicine_category
(
    category_id integer NOT NULL DEFAULT nextval('medicine_category_category_id_seq'::regclass),
    category_name character varying(30) COLLATE pg_catalog."default",
    parent_category_id integer,
    flag boolean,
    category_image_path character varying(255) COLLATE pg_catalog."default",
    health_condition text COLLATE pg_catalog."default",
    CONSTRAINT medicine_category_pkey PRIMARY KEY (category_id)
);

CREATE TABLE IF NOT EXISTS public.medicine_details
(
    md_id integer NOT NULL DEFAULT nextval('medicine_details_md_id_seq'::regclass),
    med_id integer,
    highlights character varying(255) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    indications text COLLATE pg_catalog."default",
    key_components text COLLATE pg_catalog."default",
    direction_for_use text COLLATE pg_catalog."default",
    storage character varying(100) COLLATE pg_catalog."default",
    precautions text COLLATE pg_catalog."default",
    CONSTRAINT medicine_details_pkey PRIMARY KEY (md_id)
);

CREATE TABLE IF NOT EXISTS public.medicine_discount
(
    offer_id integer NOT NULL DEFAULT nextval('medicine_discount_offer_id_seq'::regclass),
    med_id integer,
    offer_name character varying(100) COLLATE pg_catalog."default",
    offer_description text COLLATE pg_catalog."default",
    discount_percentage numeric(5, 2),
    start_date date,
    end_date date,
    CONSTRAINT medicine_discount_pkey PRIMARY KEY (offer_id)
);

CREATE TABLE IF NOT EXISTS public.pastmedicalrecords
(
    recordid integer NOT NULL DEFAULT nextval('pastmedicalrecords_recordid_seq'::regclass),
    allergies text COLLATE pg_catalog."default",
    currentmedication text COLLATE pg_catalog."default",
    pastmedication text COLLATE pg_catalog."default",
    chronicdiseases text COLLATE pg_catalog."default",
    injuries text COLLATE pg_catalog."default",
    surgeries text COLLATE pg_catalog."default",
    CONSTRAINT pastmedicalrecords_pkey PRIMARY KEY (recordid)
);

CREATE TABLE IF NOT EXISTS public.patient_doctor_relation
(
    doctor_id integer NOT NULL,
    patient_id integer NOT NULL,
    CONSTRAINT patient_doctor_relation_pkey PRIMARY KEY (doctor_id, patient_id)
);

CREATE TABLE IF NOT EXISTS public.patient_profile
(
    patient_id integer NOT NULL DEFAULT nextval('patient_profile_patient_id_seq'::regclass),
    user_id integer,
    mobile_number bigint,
    address character varying(100) COLLATE pg_catalog."default",
    pin_code integer,
    country character varying(50) COLLATE pg_catalog."default",
    city character varying(30) COLLATE pg_catalog."default",
    gender character varying(10) COLLATE pg_catalog."default",
    age integer,
    dob date,
    blood_group character varying(10) COLLATE pg_catalog."default",
    height numeric(5, 2),
    weight numeric(5, 2),
    marital_status character varying(20) COLLATE pg_catalog."default",
    email_add character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT patient_profile_pkey PRIMARY KEY (patient_id)
);

CREATE TABLE IF NOT EXISTS public.pharma_admin
(
    pharmaadmin_id integer NOT NULL DEFAULT nextval('pharma_admin_pharmaadmin_id_seq'::regclass),
    pharma_id integer,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    email_id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    password character varying(100) COLLATE pg_catalog."default" NOT NULL,
    contact character varying(15) COLLATE pg_catalog."default" NOT NULL,
    added_by integer,
    CONSTRAINT pharma_admin_pkey PRIMARY KEY (pharmaadmin_id)
);

CREATE TABLE IF NOT EXISTS public.pharmacy
(
    pharma_id integer NOT NULL DEFAULT nextval('pharmacy_pharma_id_seq'::regclass),
    approval_status boolean,
    pharma_name character varying(50) COLLATE pg_catalog."default",
    pharma_city character varying(50) COLLATE pg_catalog."default",
    pharma_address character varying(255) COLLATE pg_catalog."default",
    pharma_official_email character varying(255) COLLATE pg_catalog."default",
    pharma_official_contact character varying(10) COLLATE pg_catalog."default",
    pharma_reg_certi_path character varying(255) COLLATE pg_catalog."default",
    pharma_reg_time_stamp timestamp without time zone,
    CONSTRAINT pharmacy_pkey PRIMARY KEY (pharma_id)
);

CREATE TABLE IF NOT EXISTS public.pharmacy_order
(
    order_no integer NOT NULL DEFAULT nextval('pharmacy_order_order_no_seq'::regclass),
    amount numeric,
    patient_id integer,
    payment_mode character varying(40) COLLATE pg_catalog."default" NOT NULL,
    transaction_id character varying(30) COLLATE pg_catalog."default",
    order_from_id character varying(30) COLLATE pg_catalog."default",
    ordered_on timestamp without time zone,
    CONSTRAINT pharmacy_order_pkey PRIMARY KEY (order_no)
);

CREATE TABLE IF NOT EXISTS public.pharmacy_order_content
(
    sr_no integer NOT NULL DEFAULT nextval('pharmacy_order_content_sr_no_seq'::regclass),
    order_no integer,
    item_id integer,
    item_name character varying(40) COLLATE pg_catalog."default",
    quantity integer,
    price numeric,
    delivery_track character varying(100) COLLATE pg_catalog."default",
    ordered_on timestamp without time zone,
    CONSTRAINT pharmacy_order_content_pkey PRIMARY KEY (sr_no)
);

CREATE TABLE IF NOT EXISTS public.specialities
(
    spec_id integer NOT NULL DEFAULT nextval('specialities_spec_id_seq'::regclass),
    spec_name character varying(50) COLLATE pg_catalog."default",
    spec_description text COLLATE pg_catalog."default",
    CONSTRAINT specialities_pkey PRIMARY KEY (spec_id)
);

CREATE TABLE IF NOT EXISTS public.super_admin
(
    admin_id integer NOT NULL DEFAULT nextval('super_admin_admin_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    email_id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    password character varying(50) COLLATE pg_catalog."default" NOT NULL,
    contact character varying(15) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT super_admin_pkey PRIMARY KEY (admin_id)
);

CREATE TABLE IF NOT EXISTS public.test_order
(
    order_no integer NOT NULL DEFAULT nextval('test_order_order_no_seq'::regclass),
    amount numeric,
    patient_id integer,
    payment_mode character varying(40) COLLATE pg_catalog."default" NOT NULL,
    transaction_id character varying(30) COLLATE pg_catalog."default",
    order_from_id character varying(30) COLLATE pg_catalog."default",
    ordered_on timestamp without time zone,
    CONSTRAINT test_order_pkey PRIMARY KEY (order_no)
);

CREATE TABLE IF NOT EXISTS public.test_order_content
(
    sr_no integer NOT NULL DEFAULT nextval('test_order_content_sr_no_seq'::regclass),
    order_no integer,
    test_id integer,
    test_name character varying(40) COLLATE pg_catalog."default",
    price numeric,
    delivery_track character varying(255) COLLATE pg_catalog."default",
    ordered_on timestamp without time zone,
    CONSTRAINT test_order_content_pkey PRIMARY KEY (sr_no)
);

CREATE TABLE IF NOT EXISTS public.tests
(
    test_id integer NOT NULL DEFAULT nextval('tests_test_id_seq'::regclass),
    test_name character varying(100) COLLATE pg_catalog."default",
    home_sample bit(1),
    test_price numeric(10, 2),
    test_description text COLLATE pg_catalog."default",
    CONSTRAINT tests_pkey PRIMARY KEY (test_id)
);

CREATE TABLE IF NOT EXISTS public.tests_lab
(
    test_lab_id integer NOT NULL DEFAULT nextval('tests_lab_test_lab_id_seq'::regclass),
    test_id integer,
    lab_id integer,
    gov_lab_apro_certi_path character varying(255) COLLATE pg_catalog."default",
    oh_lab_apro_status bit(1),
    category character varying COLLATE pg_catalog."default",
    CONSTRAINT tests_lab_pkey PRIMARY KEY (test_lab_id)
);

CREATE TABLE IF NOT EXISTS public.user_registration
(
    user_id integer NOT NULL DEFAULT nextval('user_registration_user_id_seq'::regclass),
    first_name character varying(50) COLLATE pg_catalog."default",
    last_name character varying(50) COLLATE pg_catalog."default",
    password character varying(30) COLLATE pg_catalog."default",
    emailid character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT user_registration_pkey PRIMARY KEY (user_id)
);

CREATE TABLE IF NOT EXISTS public.video_conference
(
    vc_id integer NOT NULL DEFAULT nextval('video_conference_vc_id_seq'::regclass),
    doctor_id integer,
    patient_id integer,
    appointmentid integer,
    date timestamp without time zone,
    CONSTRAINT video_conference_pkey PRIMARY KEY (vc_id)
);

ALTER TABLE IF EXISTS public.admin_notifications
    ADD CONSTRAINT admin_notifications_super_admin_id_fkey FOREIGN KEY (super_admin_id)
    REFERENCES public.super_admin (admin_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.appointment
    ADD CONSTRAINT appointment_doctor_id_fkey FOREIGN KEY (doctor_id)
    REFERENCES public.doctor_profile (doctor_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.appointment
    ADD CONSTRAINT appointment_patient_id_fkey FOREIGN KEY (patient_id)
    REFERENCES public.patient_profile (patient_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.blog_comment
    ADD CONSTRAINT blog_comment_blog_id_fkey FOREIGN KEY (blog_id)
    REFERENCES public.blogs (blog_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.cart_table_test
    ADD CONSTRAINT cart_table_test_patient_id_fkey FOREIGN KEY (patient_id)
    REFERENCES public.patient_profile (patient_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.cart_table_test
    ADD CONSTRAINT cart_table_test_test_id_fkey FOREIGN KEY (test_id)
    REFERENCES public.tests (test_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.departments
    ADD CONSTRAINT departments_hospital_id_fkey FOREIGN KEY (hospital_id)
    REFERENCES public.hospitals (hospital_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.doc_add
    ADD CONSTRAINT doc_add_doctor_id_fkey FOREIGN KEY (doctor_id)
    REFERENCES public.doctor_profile (doctor_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.doc_auth
    ADD CONSTRAINT doc_auth_admin_id_fkey FOREIGN KEY (admin_id)
    REFERENCES public.super_admin (admin_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.doc_auth
    ADD CONSTRAINT doc_auth_profile_id_fkey FOREIGN KEY (profile_id)
    REFERENCES public.doctor_registration (profile_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.doctor_bank_details
    ADD CONSTRAINT doctor_bank_details_doctor_id_fkey FOREIGN KEY (doctor_id)
    REFERENCES public.doctor_profile (doctor_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.doctor_profile
    ADD CONSTRAINT doctor_profile_profile_id_fkey FOREIGN KEY (profile_id)
    REFERENCES public.doctor_registration (profile_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.doctor_profile
    ADD CONSTRAINT doctor_profile_spec_id_fkey FOREIGN KEY (spec_id)
    REFERENCES public.specialities (spec_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.doctor_schedule
    ADD CONSTRAINT doctor_schedule_doctor_id_fkey FOREIGN KEY (doctor_id)
    REFERENCES public.doctor_profile (doctor_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.feedback_hospital
    ADD CONSTRAINT feedback_hospital_patient_id_fkey FOREIGN KEY (patient_id)
    REFERENCES public.patient_profile (patient_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.feedback_lab
    ADD CONSTRAINT feedback_lab_patient_id_fkey FOREIGN KEY (patient_id)
    REFERENCES public.patient_profile (patient_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.feedback_todoctor
    ADD CONSTRAINT feedback_todoctor_doctor_id_fkey FOREIGN KEY (doctor_id)
    REFERENCES public.doctor_profile (doctor_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.feedback_todoctor
    ADD CONSTRAINT feedback_todoctor_patient_id_fkey FOREIGN KEY (patient_id)
    REFERENCES public.patient_profile (patient_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.fees
    ADD CONSTRAINT fees_doctor_id_fkey FOREIGN KEY (doctor_id)
    REFERENCES public.doctor_profile (doctor_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.hospital_admin
    ADD CONSTRAINT hospital_admin_hospital_id_fkey FOREIGN KEY (hospital_id)
    REFERENCES public.hospitals (hospital_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.hospital_advertising
    ADD CONSTRAINT hospital_advertising_hospital_id_fkey FOREIGN KEY (hospital_id)
    REFERENCES public.hospitals (hospital_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.hospital_discount
    ADD CONSTRAINT hospital_discount_hospital_id_fkey FOREIGN KEY (hospital_id)
    REFERENCES public.hospitals (hospital_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.inventory
    ADD CONSTRAINT inventory_med_id_fkey FOREIGN KEY (med_id)
    REFERENCES public.medicine (med_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.inventory
    ADD CONSTRAINT inventory_pharma_id_fkey FOREIGN KEY (pharma_id)
    REFERENCES public.pharmacy (pharma_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.lab_admin
    ADD CONSTRAINT lab_admin_lab_id_fkey FOREIGN KEY (lab_id)
    REFERENCES public.labs (lab_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.lab_advertising
    ADD CONSTRAINT lab_advertising_lab_id_fkey FOREIGN KEY (lab_id)
    REFERENCES public.labs (lab_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.lab_discount
    ADD CONSTRAINT lab_discount_lab_id_fkey FOREIGN KEY (lab_id)
    REFERENCES public.labs (lab_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.lab_discount
    ADD CONSTRAINT lab_discount_test_id_fkey FOREIGN KEY (test_id)
    REFERENCES public.tests (test_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.likes_blog
    ADD CONSTRAINT likes_blog_blog_id_fkey FOREIGN KEY (blog_id)
    REFERENCES public.blogs (blog_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.likes_blog
    ADD CONSTRAINT likes_blog_patient_id_fkey FOREIGN KEY (patient_id)
    REFERENCES public.patient_profile (patient_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.medical_record
    ADD CONSTRAINT medical_record_patient_id_fkey FOREIGN KEY (patient_id)
    REFERENCES public.patient_profile (patient_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.medicine
    ADD CONSTRAINT medicine_category_id_fkey FOREIGN KEY (category_id)
    REFERENCES public.medicine_category (category_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.medicine_category
    ADD CONSTRAINT medicine_category_parent_category_id_fkey FOREIGN KEY (parent_category_id)
    REFERENCES public.medicine_category (category_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.medicine_details
    ADD CONSTRAINT medicine_details_med_id_fkey FOREIGN KEY (med_id)
    REFERENCES public.medicine (med_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.medicine_discount
    ADD CONSTRAINT medicine_discount_med_id_fkey FOREIGN KEY (med_id)
    REFERENCES public.medicine (med_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.patient_doctor_relation
    ADD CONSTRAINT patient_doctor_relation_doctor_id_fkey FOREIGN KEY (doctor_id)
    REFERENCES public.doctor_profile (doctor_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.patient_doctor_relation
    ADD CONSTRAINT patient_doctor_relation_patient_id_fkey FOREIGN KEY (patient_id)
    REFERENCES public.patient_profile (patient_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.patient_profile
    ADD CONSTRAINT patient_profile_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.user_registration (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.pharma_admin
    ADD CONSTRAINT pharma_admin_pharma_id_fkey FOREIGN KEY (pharma_id)
    REFERENCES public.pharmacy (pharma_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.pharmacy_order
    ADD CONSTRAINT pharmacy_order_patient_id_fkey FOREIGN KEY (patient_id)
    REFERENCES public.patient_profile (patient_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.pharmacy_order_content
    ADD CONSTRAINT pharmacy_order_content_order_no_fkey FOREIGN KEY (order_no)
    REFERENCES public.pharmacy_order (order_no) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.test_order
    ADD CONSTRAINT test_order_patient_id_fkey FOREIGN KEY (patient_id)
    REFERENCES public.patient_profile (patient_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.test_order_content
    ADD CONSTRAINT test_order_content_order_no_fkey FOREIGN KEY (order_no)
    REFERENCES public.test_order (order_no) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.tests_lab
    ADD CONSTRAINT tests_lab_lab_id_fkey FOREIGN KEY (lab_id)
    REFERENCES public.labs (lab_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.tests_lab
    ADD CONSTRAINT tests_lab_test_id_fkey FOREIGN KEY (test_id)
    REFERENCES public.tests (test_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.video_conference
    ADD CONSTRAINT video_conference_appointmentid_fkey FOREIGN KEY (appointmentid)
    REFERENCES public.appointment (appointmentid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.video_conference
    ADD CONSTRAINT video_conference_doctor_id_fkey FOREIGN KEY (doctor_id)
    REFERENCES public.doctor_profile (doctor_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.video_conference
    ADD CONSTRAINT video_conference_patient_id_fkey FOREIGN KEY (patient_id)
    REFERENCES public.patient_profile (patient_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;